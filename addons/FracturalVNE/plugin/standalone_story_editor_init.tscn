[gd_scene load_steps=6 format=2]

[ext_resource path="res://addons/FracturalVNE/plugin/ui/story_script_editor.tscn" type="PackedScene" id=1]
[ext_resource path="res://addons/FracturalVNE/core/utils/dependency_injection/service_di_container.tscn" type="PackedScene" id=2]
[ext_resource path="res://addons/FracturalVNE/plugin/ui/story_script_persistent_data.gd" type="Script" id=3]
[ext_resource path="res://addons/FracturalVNE/plugin/ui/window_sizer.gd" type="Script" id=4]

[sub_resource type="GDScript" id=1]
script/source = "extends Node
# Runs a story from a file path


# ----- Typeable ----- #

func is_type(type: String) -> bool:
	return get_types().has(type)

static func get_types() -> Array:
	return [\"StoryRunner\"]

# ----- Typeable ----- #


export var scene_manager_path: NodePath

var story_file_path: String
var quit_to_scene: PackedScene

onready var scene_manager = get_node(scene_manager_path)


func run(story_file_path_: String, quit_to_scene_: PackedScene = null):
	story_file_path = story_file_path_
	quit_to_scene = quit_to_scene_
	scene_manager.transition_to_scene(\"res://addons/FracturalVNE/core/story/story.tscn\")
"

[node name="StoryEditorInit" type="Node"]

[node name="ServiceDIContainer" parent="." instance=ExtResource( 2 )]

[node name="SceneManager" parent="ServiceDIContainer" index="0"]
initial_scene = ExtResource( 1 )

[node name="StoryRunner" parent="ServiceDIContainer" index="2"]
script = SubResource( 1 )

[node name="StoryScriptPersistentData" type="Node" parent="ServiceDIContainer"]
script = ExtResource( 3 )

[node name="WindowSizer" type="Node" parent="."]
script = ExtResource( 4 )

[editable path="ServiceDIContainer"]
